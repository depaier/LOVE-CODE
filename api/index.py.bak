from flask import Flask, request, jsonify, render_template, session, redirect, url_for
import google.generativeai as genai
from supabase import create_client, Client
from dotenv import load_dotenv
import os
# from pywebpush import webpush  # 제거됨
import json
import uuid
from datetime import datetime

# 환경변수 로딩
load_dotenv()

# --- [사주 계산 함수 초고속 최적화 버전 + 캐싱] ---
# 사주 계산 결과 캐시 (메모리 캐싱으로 동일 데이터 반복 계산 방지)
saju_cache = {}

# --- [사주 분석 결과 캐시] ---
# 동일한 사주 + MBTI 조합에 대한 AI 분석 결과를 캐싱 (파일 기반)
import json
import os

SAJU_CACHE_FILE = os.path.join(os.path.dirname(__file__), 'saju_cache.json')
MBTI_COMPATIBILITY_CACHE_FILE = os.path.join(os.path.dirname(__file__), 'mbti_compatibility_cache.json')

def load_saju_cache():
    """캐시 파일에서 사주 분석 캐시 로드"""
    try:
        if os.path.exists(SAJU_CACHE_FILE):
            with open(SAJU_CACHE_FILE, 'r', encoding='utf-8') as f:
                # MBTI별 캐시 로드 (키는 MBTI 문자열)
                cache_data = json.load(f)
                print(f"✅ 캐시 파일 로드 완료: {len(cache_data)}개 항목")
                if 'ENFP' in cache_data:
                    preview = cache_data['ENFP'][:100] + "..."
                    print(f"📋 ENFP 템플릿 미리보기: {preview}")
                return cache_data  # 그대로 반환
    except Exception as e:
        print(f"❌ 캐시 파일 로드 오류: {e}")
    return {}

def save_saju_cache(cache):
    """사주 분석 캐시를 파일에 저장"""
    try:
        # MBTI별 캐시 저장 (키는 MBTI 문자열 그대로)
        with open(SAJU_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"캐시 파일 저장 오류: {e}")

def load_mbti_compatibility_cache():
    """MBTI 호환성 캐시 로드"""
    try:
        if os.path.exists(MBTI_COMPATIBILITY_CACHE_FILE):
            with open(MBTI_COMPATIBILITY_CACHE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"MBTI 호환성 캐시 로드 오류: {e}")
    return {}

def save_mbti_compatibility_cache(cache):
    """MBTI 호환성 캐시 저장"""
    try:
        with open(MBTI_COMPATIBILITY_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"MBTI 호환성 캐시 저장 오류: {e}")

def get_cached_mbti_compatibility(mbti1, mbti2, model=None):
    """MBTI 호환성 캐시 조회, 없으면 AI로 계산해서 캐시"""
    # 캐시 로드
    cache = load_mbti_compatibility_cache()

    # 정규화된 키 생성 (항상 알파벳순으로)
    key_parts = sorted([mbti1.upper(), mbti2.upper()])
    cache_key = f"{key_parts[0]}_{key_parts[1]}"

    # 캐시 확인
    if cache_key in cache:
        return cache[cache_key]

    # 캐시에 없으면 AI로 계산
    if model:
        try:
            prompt = f"""
            다음 두 MBTI 유형의 연애/커플 호환성을 분석해주세요:

            MBTI 1: {mbti1}
            MBTI 2: {mbti2}

            호환성 점수만 숫자로 응답해주세요 (1-100점):
            """

            response = model.generate_content(prompt, generation_config=genai.types.GenerationConfig(
                temperature=0.3,
                max_output_tokens=10,
            ))

            if response and response.text:
                # 숫자만 추출
                import re
                score_match = re.search(r'\d+', response.text.strip())
                if score_match:
                    score = int(score_match.group())
                    score = max(1, min(100, score))

                    # 캐시에 저장
                    cache[cache_key] = score
                    save_mbti_compatibility_cache(cache)

                    print(f"💾 MBTI 호환성 캐시 저장: {mbti1} ↔ {mbti2} = {score}")
                    return score

        except Exception as e:
            print(f"❌ MBTI 호환성 계산 실패: {e}")

    # AI 실패 시 기본 룰 기반 계산
    base_score = 50  # 기본값

    # 같은 차원별 점수 가산
    if mbti1[0] == mbti2[0]: base_score += 15  # I/E
    if mbti1[1] == mbti2[1]: base_score += 15  # S/N
    if mbti1[2] == mbti2[2]: base_score += 10  # T/F
    if mbti1[3] == mbti2[3]: base_score += 10  # J/P

    final_score = min(base_score, 100)

    # 룰 기반 계산도 캐시에 저장
    cache[cache_key] = final_score
    save_mbti_compatibility_cache(cache)

    print(f"📊 룰 기반 MBTI 호환성: {mbti1} ↔ {mbti2} = {final_score}")
    return final_score

def calculate_saju_compatibility(saju1, saju2):
    """사주 호환성 룰 기반 계산 (기운 궁합)"""
    try:
        # 사주 문자열 파싱 (형식: 연주/월주/일주/시주)
        parts1 = saju1.split('/')
        parts2 = saju2.split('/')

        if len(parts1) < 4 or len(parts2) < 4:
            return 25  # 기본값

        year1, month1, day1, hour1 = parts1[:4]
        year2, month2, day2, hour2 = parts2[:4]

        compatibility_score = 25  # 기본 호환성

        # 1. 연주 궁합 (가장 중요)
        year_compatibility = get_element_compatibility(year1, year2)
        compatibility_score += year_compatibility * 0.4  # 40% 가중치

        # 2. 월주 궁합
        month_compatibility = get_element_compatibility(month1, month2)
        compatibility_score += month_compatibility * 0.3  # 30% 가중치

        # 3. 일주 궁합 (생년월일의 일주)
        day_compatibility = get_element_compatibility(day1, day2)
        compatibility_score += day_compatibility * 0.2  # 20% 가중치

        # 4. 시주 궁합 (출생시간)
        hour_compatibility = get_element_compatibility(hour1, hour2)
        compatibility_score += hour_compatibility * 0.1  # 10% 가중치

        # 범위 제한
        final_score = max(1, min(50, int(compatibility_score)))

        print(f"⚡ 사주 호환성 계산: {saju1} ↔ {saju2} = {final_score}/50")
        return final_score

    except Exception as e:
        print(f"❌ 사주 호환성 계산 오류: {e}")
        return 25  # 기본값

def get_element_compatibility(element1, element2):
    """오행 기운 간 호환성 계산"""
    # 오행: 목(木), 화(火), 토(土), 금(金), 수(水)
    # 궁합표 (1-10점): 10=최상, 1=최악

    compatibility_matrix = {
        # 목(木)과의 궁합
        '목': {'목': 7, '화': 9, '토': 3, '금': 1, '수': 8},
        # 화(火)과의 궁합
        '화': {'목': 8, '화': 6, '토': 10, '금': 5, '수': 2},
        # 토(土)과의 궁합
        '토': {'목': 10, '화': 5, '토': 7, '금': 8, '수': 3},
        # 금(金)과의 궁합
        '금': {'목': 2, '화': 8, '토': 9, '금': 6, '수': 10},
        # 수(水)과의 궁합
        '수': {'목': 5, '화': 10, '토': 8, '금': 3, '수': 7}
    }

    # 간지에서 오행 추출 (간단한 매핑)
    element_map = {
        # 목(木): 갑목, 을목, 인목, 묘목
        '갑': '목', '을': '목', '인': '목', '묘': '목',
        # 화(火): 병화, 정화, 계화, 임화
        '병': '화', '정': '화', '계': '화', '임': '화',
        # 토(土): 무토, 기토, 신토, 경토
        '무': '토', '기': '토', '신': '토', '경': '토',
        # 금(金):庚金, 辛金, 申金, 酉金
        '경': '금', '신': '금', '申': '금', '酉': '금',
        # 수(水):壬水, 癸水, 子水, 亥水
        '임': '수', '계': '수', '자': '수', '해': '수'
    }

    try:
        # 간지 첫 글자로 오행 추출
        elem1 = element_map.get(element1[0] if element1 else '', '토')  # 기본값 토
        elem2 = element_map.get(element2[0] if element2 else '', '토')  # 기본값 토

        score = compatibility_matrix.get(elem1, {}).get(elem2, 5)  # 기본값 5

        return score

    except Exception as e:
        print(f"❌ 오행 호환성 계산 오류: {e}")
        return 5  # 기본값

def should_skip_ai_analysis(user1, user2, model=None):
    """AI 분석을 생략할지 결정하는 사전 필터링"""
    try:
        # 1. MBTI 호환성 확인
        mbti_score = get_cached_mbti_compatibility(user1['mbti'], user2['mbti'], model)

        # 2. 사주 호환성 확인
        saju_score = calculate_saju_compatibility(user1['saju_result'], user2['saju_result'])

        # 3. 필터링 조건
        # MBTI 호환성이 60점 미만이거나 사주 호환성이 30점 미만인 경우 AI 생략
        if mbti_score < 60 or saju_score < 30:
            final_score = int((mbti_score * 0.6) + (saju_score * 1.2))  # 사주 가중치 높임
            final_score = max(20, min(69, final_score))  # 70점 미만 보장

            print(f"🚫 AI 분석 생략: {user1['name']}({user1['mbti']}) ↔ {user2['name']}({user2['mbti']})")
            print(f"   MBTI: {mbti_score}, 사주: {saju_score} → 최종: {final_score}")

            return True, final_score, f"{user1['name']}님과 {user2['name']}님은 기본적인 MBTI·사주 호환성이 낮아 깊이 있는 분석이 필요하지 않은 관계입니다."

        # 호환성이 높으면 AI 분석 진행
        print(f"🤖 AI 분석 진행: {user1['name']}({user1['mbti']}) ↔ {user2['name']}({user2['mbti']})")
        print(f"   MBTI: {mbti_score}, 사주: {saju_score} → 잠재력 높음")

        return False, mbti_score, saju_score

    except Exception as e:
        print(f"❌ 사전 필터링 오류: {e}")
        return False, 50, 25  # 기본값으로 AI 분석 진행

# 캐시 초기화
saju_analysis_cache = load_saju_cache()

def calculate_saju_pillars(year, month, day, hour):
    # 캐시 키 생성
    cache_key = (year, month, day, hour)

    # 캐시 확인 (이미 계산된 결과가 있으면 즉시 반환)
    if cache_key in saju_cache:
        return saju_cache[cache_key]
    # 천간과 지지 상수 (최적화된 배열)
    cheon_gan = ["갑", "을", "병", "정", "무", "기", "경", "신", "임", "계"]
    ji_ji = ["자", "축", "인", "묘", "진", "사", "오", "미", "신", "유", "술", "해"]

    # 연주 계산 (수학적 계산으로 즉시 완료)
    year_gan_index = (year - 4) % 10
    year_ji_index = (year - 4) % 12
    year_pillar = cheon_gan[year_gan_index] + ji_ji[year_ji_index]

    # 월주 계산 (lookup table로 즉시 완료)
    month_starts = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]
    month_index = month_starts.index(month)
    month_gan_key = cheon_gan[year_gan_index]

    # 초고속 간지 오프셋 매핑
    gan_offset_map = {
        "갑": 0, "기": 0,
        "을": 2, "경": 2,
        "병": 4, "신": 4,
        "정": 6, "임": 6,
        "무": 8, "계": 8
    }
    gan_offset = gan_offset_map.get(month_gan_key, 8)

    # 월주 lookup table (미리 계산된 값들)
    month_pillars = [
        "병인", "정묘", "무진", "기사", "경오", "신미", "임신", "계유", "갑술", "을해", "병자", "정축",
        "무인", "기묘", "경진", "신사", "임오", "계미", "갑신", "을유", "병술", "정해", "무자", "기축",
        "경인", "신묘", "임진", "계사", "갑오", "을미", "병신", "정유", "무술", "기해", "경자", "신축",
        "임인", "계묘", "갑진", "을사", "병오", "정미", "무신", "기유", "경술", "신해", "임자", "계축",
        "갑인", "을묘", "병진", "정사", "무오", "기미", "경신", "신유", "임술", "계해", "갑자", "을축"
    ]

    # 월주 인덱스 계산 및 lookup
    month_pillar_index = (year_gan_index * 12 + month_index) % 60
    month_pillar = month_pillars[month_pillar_index]

    # 일주 계산 (수학적 공식으로 즉시 계산 - 초고속)
    # 2000년 1월 1일 (토요일) 기준으로 총 일수 계산
    base_year = 2000
    base_month = 1
    base_day = 1

    # 연도별 일수 계산 (윤년 고려)
    total_days = (year - base_year) * 365 + (year - base_year) // 4 - (year - base_year) // 100 + (year - base_year) // 400

    # 월별 누적 일수 (미리 계산된 값 사용)
    cumulative_days = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]

    # 윤년 보정
    leap_year_adjust = 1 if ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0) and month > 2 else 0

    total_days += cumulative_days[month - 1] + leap_year_adjust + (day - 1)

    # 간지 계산 (수학적 공식)
    day_gan_index = (total_days + 6) % 10  # 갑자일 기준
    day_ji_index = (total_days + 8) % 12   # 자일 기준

    day_pillar = cheon_gan[day_gan_index] + ji_ji[day_ji_index]

    # 시주 계산 (lookup table로 즉시 완료)
    # 시간별 지지 매핑 (더욱 효율적인 버전)
    time_ji_indices = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]
    time_ji_index = time_ji_indices[hour]

    # 시주 간지 오프셋
    day_gan_key = cheon_gan[day_gan_index]
    time_gan_offset = gan_offset_map.get(day_gan_key, 8)
    time_gan_index = (time_gan_offset + time_ji_index) % 10

    time_pillar = cheon_gan[time_gan_index] + ji_ji[time_ji_index]

    # 계산 결과 캐시에 저장 (다음 호출 시 즉시 반환)
    result = (year_pillar, month_pillar, day_pillar, time_pillar)
    saju_cache[cache_key] = result

    return result
# --- [사주 계산 함수 부분 끝] ---

# 프로젝트 루트 경로 계산 (api 폴더에서 한 단계 위로)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

app = Flask(__name__,
            template_folder=os.path.join(PROJECT_ROOT, 'templates'),
            static_folder=os.path.join(PROJECT_ROOT, 'static'))
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'your-secret-key-here-change-this-in-production')

# Supabase 연결 설정
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

# Web Push VAPID 설정
VAPID_PRIVATE_KEY = os.getenv('VAPID_PRIVATE_KEY')
VAPID_PUBLIC_KEY = os.getenv('VAPID_PUBLIC_KEY')
VAPID_EMAIL = os.getenv('VAPID_EMAIL')
APP_URL = os.getenv('APP_URL', 'http://localhost:5000')

print(f"🔧 환경변수 확인:")
print(f"   SUPABASE_URL: {'설정됨' if SUPABASE_URL else '없음'}")
print(f"   SUPABASE_ANON_KEY: {'설정됨' if SUPABASE_ANON_KEY else '없음'}")
print(f"   GOOGLE_API_KEY: {'설정됨' if os.getenv('GOOGLE_API_KEY') else '없음'}")
print(f"   VAPID_PRIVATE_KEY: {'설정됨' if VAPID_PRIVATE_KEY else '없음'}")
print(f"   VAPID_PUBLIC_KEY: {'설정됨' if VAPID_PUBLIC_KEY else '없음'}")
print(f"   VAPID_EMAIL: {'설정됨' if VAPID_EMAIL else '없음'}")

if not SUPABASE_URL or not SUPABASE_ANON_KEY:
    raise ValueError("SUPABASE_URL과 SUPABASE_ANON_KEY 환경변수가 설정되지 않았습니다.")

# Supabase 클라이언트 생성
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    print("✅ Supabase 클라이언트 생성 성공")
except Exception as e:
    print(f"❌ Supabase 클라이언트 생성 실패: {e}")
    raise

def init_supabase_tables():
    """Supabase 테이블 초기화 (SQL 에디터에서 수동으로 실행)"""
    print("📝 Supabase SQL 에디터에서 다음 쿼리들을 실행하세요:")
    print("""
-- results 테이블 생성
CREATE TABLE IF NOT EXISTS results (
    id SERIAL PRIMARY KEY,
    student_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    mbti TEXT NOT NULL,
    instagram_id TEXT NOT NULL,
    saju_result TEXT NOT NULL,
    ai_analysis TEXT NOT NULL,
    is_matched BOOLEAN DEFAULT FALSE,
    gender TEXT DEFAULT '',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- matches 테이블 생성
CREATE TABLE IF NOT EXISTS matches (
    id SERIAL PRIMARY KEY,
    user1_id INTEGER NOT NULL REFERENCES results(id) ON DELETE CASCADE,
    user2_id INTEGER NOT NULL REFERENCES results(id) ON DELETE CASCADE,
    compatibility_score INTEGER NOT NULL,
    matching_reason TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user1_id, user2_id)
);

-- push_subscriptions 테이블 생성 (푸시 알림용)
CREATE TABLE IF NOT EXISTS push_subscriptions (
    id SERIAL PRIMARY KEY,
    device_token TEXT NOT NULL UNIQUE,
    endpoint TEXT NOT NULL,
    p256dh TEXT NOT NULL,
    auth TEXT NOT NULL,
    user_id INTEGER REFERENCES results(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_used TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- user_notifications 테이블 생성 (알림 기록용)
CREATE TABLE IF NOT EXISTS user_notifications (
    id SERIAL PRIMARY KEY,
    device_token TEXT NOT NULL,
    title TEXT NOT NULL,
    body TEXT NOT NULL,
    data JSONB DEFAULT '{}',
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    read_at TIMESTAMP WITH TIME ZONE,
    FOREIGN KEY (device_token) REFERENCES push_subscriptions(device_token) ON DELETE CASCADE
);

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_results_student_id ON results(student_id);
CREATE INDEX IF NOT EXISTS idx_results_is_matched ON results(is_matched);
CREATE INDEX IF NOT EXISTS idx_matches_user1_id ON matches(user1_id);
CREATE INDEX IF NOT EXISTS idx_matches_user2_id ON matches(user2_id);
CREATE INDEX IF NOT EXISTS idx_matches_score ON matches(compatibility_score DESC);
CREATE INDEX IF NOT EXISTS idx_push_subscriptions_device_token ON push_subscriptions(device_token);
CREATE INDEX IF NOT EXISTS idx_push_subscriptions_user_id ON push_subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_notifications_device_token ON user_notifications(device_token);

-- 시퀀스 재설정 (중복 ID 문제 해결)
SELECT setval('results_id_seq', (SELECT COALESCE(MAX(id), 0) + 1 FROM results), false);
SELECT setval('matches_id_seq', (SELECT COALESCE(MAX(id), 0) + 1 FROM matches), false);
SELECT setval('push_subscriptions_id_seq', (SELECT COALESCE(MAX(id), 0) + 1 FROM push_subscriptions), false);
SELECT setval('user_notifications_id_seq', (SELECT COALESCE(MAX(id), 0) + 1 FROM user_notifications), false);
    """)
    print("✅ Supabase 테이블 생성 및 시퀀스 재설정 쿼리가 출력되었습니다.")

# Gemini API 키 설정
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

if GOOGLE_API_KEY == 'YOUR_NEW_API_KEY_HERE' or not GOOGLE_API_KEY:
    print("⚠️  GOOGLE_API_KEY가 설정되지 않았습니다.")
    print("   🔑 Google AI Studio에서 새 API 키를 발급받으세요:")
    print("      https://makersuite.google.com/app/apikey")
    print("   📝 발급받은 키를 아래 방법 중 하나로 설정하세요:")
    print("      1. 환경변수: export GOOGLE_API_KEY='your-api-key'")
    print("      2. 코드에서: GOOGLE_API_KEY = 'your-api-key'")
    GOOGLE_API_KEY = None

# Supabase 테이블 초기화 안내 (실제 초기화는 Supabase 대시보드에서 수동으로 실행)
print("🚀 Supabase 데이터베이스 설정:")
init_supabase_tables()

if GOOGLE_API_KEY:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        print("✅ Google AI API 설정 완료")
    except Exception as e:
        print(f"❌ Google AI API 설정 실패: {e}")
        GOOGLE_API_KEY = None

# API 키 유효성 확인 함수
def test_api_key():
    if not GOOGLE_API_KEY:
        return False, "API 키가 설정되지 않았습니다."

    try:
        # 간단한 모델 리스트로 API 키 테스트
        models = list(genai.list_models())
        return True, f"API 키 유효. {len(models)}개 모델 사용 가능."
    except Exception as e:
        return False, f"API 키 오류: {str(e)}"

# 모델 사용 가능 여부 확인 함수
def test_model(model_name):
    if not GOOGLE_API_KEY:
        return False, "API 키가 설정되지 않았습니다."

    try:
        model = genai.GenerativeModel(model_name)
        response = model.generate_content('테스트')
        return True, "모델 정상 작동"
    except Exception as e:
        return False, f"모델 오류: {str(e)}"

# 사용 가능한 모델 목록 확인 함수
def get_available_models():
    if not GOOGLE_API_KEY:
        return []

    try:
        models = list(genai.list_models())
        generative_models = []
        for model in models:
            if hasattr(model, 'supported_generation_methods') and 'generateContent' in model.supported_generation_methods:
                generative_models.append(model.name)
        return generative_models
    except Exception as e:
        return []

# --- [푸시 알림 관련 함수들] ---

def generate_device_token():
    """고유한 디바이스 토큰 생성"""
    return str(uuid.uuid4())

def send_push_notification(subscription_info, title, body, data=None):
    """푸시 알림 전송 - Node.js web-push 라이브러리 사용"""
    try:
        import subprocess
        import json
        import os
        import tempfile

        endpoint = subscription_info.get('endpoint', '')
        p256dh = subscription_info.get('keys', {}).get('p256dh', '')
        auth = subscription_info.get('keys', {}).get('auth', '')

        if not all([endpoint, p256dh, auth]):
            print("❌ 구독 정보가 불완전합니다")
            return False

        print(f"📤 푸시 알림 전송 시도: {endpoint[:50]}...")
        print(f"📝 제목: {title}")
        print(f"📝 내용: {body}")

        # 안전한 문자열로 변환 (쉘 인젝션 방지)
        safe_title = title.replace('"', '\\"').replace("'", "\\'")
        safe_body = body.replace('"', '\\"').replace("'", "\\'")

        # Node.js 스크립트로 푸시 알림 전송
        script_content = f'''
const webpush = require("web-push");

// VAPID 키 직접 설정 (Python에서 전달받음)
const vapidEmail = "{VAPID_EMAIL}";
const vapidPublicKey = "{VAPID_PUBLIC_KEY}";
const vapidPrivateKey = "{VAPID_PRIVATE_KEY}";

// VAPID 키 설정
webpush.setVapidDetails(
  vapidEmail.startsWith('mailto:') ? vapidEmail : `mailto:${{vapidEmail}}`,
  vapidPublicKey,
  vapidPrivateKey
);

const subscription = {{
  endpoint: "{endpoint}",
  keys: {{
    p256dh: "{p256dh}",
    auth: "{auth}"
  }}
}};

const payload = JSON.stringify({{
  title: "{safe_title}",
  body: "{safe_body}",
  icon: "{APP_URL}/static/img/kor.gif",
  badge: "{APP_URL}/static/img/kor.gif",
  data: {json.dumps(data) if data else '{}'}
}});

console.log("Node.js에서 푸시 알림 전송 시도...");

webpush.sendNotification(subscription, payload)
  .then(result => {{
    console.log("✅ 푸시 알림 전송 성공");
    process.exit(0);
  }})
  .catch(err => {{
    console.error("❌ 푸시 알림 전송 실패:", err.message);
    console.error("에러 코드:", err.statusCode);
    process.exit(1);
  }});
'''

        # 프로젝트 루트에 임시 파일 생성
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        script_path = os.path.join(project_root, f'push_temp_{os.urandom(8).hex()}.js')

        try:
            # 임시 파일로 Node.js 스크립트 생성 (프로젝트 루트에)
            with open(script_path, 'w', encoding='utf-8') as f:
                f.write(script_content)

            # Node.js 스크립트 실행 (프로젝트 루트에서)
            env = os.environ.copy()
            env.update({
                'VAPID_PRIVATE_KEY': VAPID_PRIVATE_KEY,
                'VAPID_PUBLIC_KEY': VAPID_PUBLIC_KEY,
                'VAPID_EMAIL': VAPID_EMAIL,
                'APP_URL': APP_URL
            })

            result = subprocess.run(
                ['node', os.path.basename(script_path)],
                capture_output=True,
                text=True,
                timeout=15,
                cwd=project_root,  # 프로젝트 루트에서 실행
                env=env  # 환경변수 전달
            )

            print("📡 Node.js 출력:")
            if result.stdout:
                print(result.stdout.strip())
            if result.stderr:
                print("📡 Node.js 오류:")
                print(result.stderr.strip())

            return result.returncode == 0

        finally:
            # 임시 파일 삭제
            try:
                os.unlink(script_path)
            except:
                pass

    except Exception as e:
        print(f"❌ 푸시 알림 전송 실패: {e}")
        import traceback
        print(f"상세 오류: {traceback.format_exc()}")
        return False

def save_push_subscription(device_token, subscription_data, user_id=None):
    """푸시 구독 정보 저장"""
    try:
        supabase.table('push_subscriptions').upsert({
            'device_token': device_token,
            'endpoint': subscription_data['endpoint'],
            'p256dh': subscription_data['keys']['p256dh'],
            'auth': subscription_data['keys']['auth'],
            'user_id': user_id
        }).execute()
        return True
    except Exception as e:
        print(f"❌ 푸시 구독 저장 실패: {e}")
        return False

def get_push_subscription(device_token):
    """푸시 구독 정보 조회"""
    try:
        response = supabase.table('push_subscriptions').select('*').eq('device_token', device_token).execute()
        return response.data[0] if response.data else None
    except Exception as e:
        print(f"❌ 푸시 구독 조회 실패: {e}")
        return None

def send_matching_notification(user_id):
    """매칭 완료 알림 전송"""
    try:
        print(f"🔔 사용자 {user_id}에게 매칭 알림 전송 시도")

        # 사용자의 푸시 구독 정보 조회
        subscriptions = supabase.table('push_subscriptions').select('*').eq('user_id', user_id).execute()
        print(f"📊 조회된 구독 정보: {len(subscriptions.data) if subscriptions.data else 0}개")

        if not subscriptions.data:
            print(f"⚠️ 사용자 {user_id}의 푸시 구독 정보가 없습니다.")
            return False

        # 매칭 결과 조회
        matches = supabase.table('matches').select('*').or_(
            f'user1_id.eq.{user_id},user2_id.eq.{user_id}'
        ).order('compatibility_score', desc=True).limit(5).execute()
        print(f"📊 매칭 결과: {len(matches.data) if matches.data else 0}개")

        if not matches.data:
            print(f"⚠️ 사용자 {user_id}의 매칭 결과가 없습니다.")
            return False

        # 알림 전송
        title = "🎉 사주 매칭이 완료되었습니다!"
        body = f"총 {len(matches.data)}명의 매칭 상대를 찾았어요. 확인해보세요!"

        success_count = 0
        for i, subscription in enumerate(subscriptions.data):
            print(f"📤 구독 {i+1}번 전송 시도: {subscription['device_token'][:8]}...")

            subscription_info = {
                'endpoint': subscription['endpoint'],
                'keys': {
                    'p256dh': subscription['p256dh'],
                    'auth': subscription['auth']
                }
            }

            try:
                result = send_push_notification(
                    subscription_info,
                    title,
                    body,
                    data={'action': 'view_matches', 'user_id': user_id}
                )

                if result:
                    success_count += 1
                    print(f"✅ 구독 {i+1}번 전송 성공")

                    # 알림 기록 저장
                    supabase.table('user_notifications').insert({
                        'device_token': subscription['device_token'],
                        'title': title,
                        'body': body,
                        'data': json.dumps({'action': 'view_matches', 'user_id': user_id})
                    }).execute()
                else:
                    print(f"❌ 구독 {i+1}번 전송 실패")

            except Exception as sub_error:
                print(f"❌ 구독 {i+1}번 전송 중 오류: {sub_error}")

        print(f"🎯 최종 결과: 사용자 {user_id}에게 {success_count}/{len(subscriptions.data)}개의 푸시 알림 전송 성공")
        return success_count > 0

    except Exception as e:
        print(f"❌ 매칭 알림 전송 실패: {e}")
        import traceback
        print(f"❌ 상세 오류: {traceback.format_exc()}")
        return False

@app.route('/')
def index():
    try:
        return render_template('index.html')
    except Exception as e:
        print(f"❌ 메인 페이지 렌더링 오류: {e}")
        import traceback
        print("상세 에러:")
        print(traceback.format_exc())
        return f"서버 오류가 발생했습니다: {str(e)}", 500

@app.route('/admin', methods=['GET', 'POST'])
def admin():
    if request.method == 'POST':
        # 로그인 처리
        student_id = request.form.get('student_id')
        password = request.form.get('password')

        # 학번과 비밀번호 확인
        if student_id == '202100672' and password == '정연웅1!':
            session['logged_in'] = True
            return redirect(url_for('admin'))
        else:
            return render_template('admin_login.html', error='학번 또는 비밀번호가 올바르지 않습니다.')

    # GET 요청 처리 - 로그인 상태 확인
    if not session.get('logged_in'):
        return render_template('admin_login.html')

    # 로그인된 상태 - 관리자 페이지 표시
    try:
        # Supabase에서 데이터 조회
        response = supabase.table('results').select('*').order('created_at', desc=True).execute()
        results = response.data

        return render_template('admin.html', results=results)
    except Exception as e:
        return f"관리자 페이지 로딩 중 오류 발생: {e}"

@app.route('/admin/logout')
def logout():
    session.pop('logged_in', None)
    return redirect(url_for('admin'))

@app.route('/admin/api-test')
def api_test():
    if not session.get('logged_in'):
        return jsonify({'error': '로그인이 필요합니다'}), 401

    try:
        # API 키 테스트
        api_valid, api_message = test_api_key()

        # 사용 가능한 모델 목록
        available_models = get_available_models()

        # 모델 테스트
        model_results = {}
        test_models = ['gemini-2.0-flash', 'gemini-1.5-pro', 'gemini-pro']
        for model_name in test_models:
            model_valid, model_message = test_model(model_name)
            model_results[model_name] = {
                'valid': model_valid,
                'message': model_message
            }

        return jsonify({
            'api_key': {
                'valid': api_valid,
                'message': api_message
            },
            'available_models': available_models,
            'models': model_results
        })

    except Exception as e:
        return jsonify({'error': f'API 테스트 중 오류 발생: {e}'}), 500

@app.route('/admin/result/<int:result_id>')
def get_result_detail(result_id):
    if not session.get('logged_in'):
        return jsonify({'error': '로그인이 필요합니다'}), 401

    try:
        # Supabase에서 특정 결과 조회
        response = supabase.table('results').select('*').eq('id', result_id).execute()
        result = response.data

        if result and len(result) > 0:
            return jsonify(result[0])
        else:
            return jsonify({'error': '결과를 찾을 수 없습니다'}), 404
    except Exception as e:
        return jsonify({'error': f'데이터 조회 중 오류 발생: {e}'}), 500

@app.route('/admin/result/<int:result_id>', methods=['DELETE'])
def delete_result(result_id):
    if not session.get('logged_in'):
        return jsonify({'error': '로그인이 필요합니다'}), 401

    try:
        # Supabase에서 데이터 삭제
        response = supabase.table('results').delete().eq('id', result_id).execute()
        deleted_count = len(response.data)

        if deleted_count > 0:
            return jsonify({'message': '결과가 성공적으로 삭제되었습니다'})
        else:
            return jsonify({'error': '삭제할 결과를 찾을 수 없습니다'}), 404
    except Exception as e:
        return jsonify({'error': f'삭제 중 오류 발생: {e}'}), 500

def perform_batch_matching(user_group_1, user_group_2, model, batch_name=""):
    """배치 단위로 매칭 분석 수행"""
    batch_matches = []

    print(f"🔄 {batch_name} 매칭 분석 중... ({len(user_group_1)}명 × {len(user_group_2)}명 = {len(user_group_1) * len(user_group_2)}쌍)")

    for i, user1 in enumerate(user_group_1):
        for j, user2 in enumerate(user_group_2):
            if user1['id'] == user2['id']:
                continue  # 자기 자신과의 매칭 제외

            try:
                # AI에게 호환성 분석 요청 (간단 버전)
                prompt = f"""
                {user1['name']}({user1['mbti']}) ↔ {user2['name']}({user2['mbti']})

                MBTI 기반 호환성 분석:
                호환성 점수: [1-100점]
                매칭 이유: [매우 간단한 텍스트 설명]
                """

                response = model.generate_content(prompt, generation_config=genai.types.GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=100,  # 매우 짧게 제한하여 속도 최적화
                ))

                if response is None:
                    print(f"⚠️ AI 응답이 None: {user1['name']} ↔ {user2['name']}")
                    continue

                ai_result = response.text.strip() if response.text else ""

                # HTML 에러 응답 체크 (JSON 파싱 오류 방지)
                if not ai_result or ai_result.startswith('<!DOCTYPE') or '<html' in ai_result.lower():
                    print(f"⚠️ HTML 에러 응답 감지: {user1['name']} ↔ {user2['name']}")
                    continue

                # 간단한 MBTI 호환성 계산
                mbti1 = user1['mbti']
                mbti2 = user2['mbti']

                # 기본 호환성 점수 계산 (MBTI만)
                base_score = 50  # 기본값

                # 같은 차원별 점수 가산
                if mbti1[0] == mbti2[0]: base_score += 15  # I/E
                if mbti1[1] == mbti2[1]: base_score += 15  # S/N
                if mbti1[2] == mbti2[2]: base_score += 10  # T/F
                if mbti1[3] == mbti2[3]: base_score += 10  # J/P

                compatibility_score = min(base_score, 100)  # 최대 100점

                # AI 응답에서 점수 추출 시도 (있으면 사용)
                if ai_result and '호환성 점수:' in ai_result:
                    try:
                            import re
                        score_match = re.search(r'호환성 점수:\s*(\d+)', ai_result)
                            if score_match:
                            ai_score = int(score_match.group(1))
                            if 1 <= ai_score <= 100:
                                compatibility_score = ai_score
                        except:
                            pass

                # 매우 간단한 매칭 이유 생성
                if compatibility_score >= 80:
                    matching_reason = f"{user1['name']}님과 {user2['name']}님은 매우 잘 맞아요"
                elif compatibility_score >= 60:
                    matching_reason = f"{user1['name']}님과 {user2['name']}님은 잘 맞는 편이에요"
                                else:
                    matching_reason = f"{user1['name']}님과 {user2['name']}님은 보통 호환성입니다"

                # AI 응답에서 매칭 이유 추출 시도 (있으면 사용)
                if '매칭 이유:' in ai_result:
                    try:
                        reason_part = ai_result.split('매칭 이유:', 1)[1].strip()
                        if reason_part and len(reason_part.strip()) > 3:
                            matching_reason = reason_part.strip()[:50]  # 50자로 제한
                    except:
                        pass

                batch_matches.append({
                    'user1_id': user1['id'],
                    'user2_id': user2['id'],
                    'user1_name': user1['name'],
                    'user2_name': user2['name'],
                    'compatibility_score': compatibility_score,
                    'matching_reason': matching_reason
                })

                print(f"✅ {batch_name} {i+1}-{j+1}: {user1['name']} ↔ {user2['name']} (점수: {compatibility_score})")

            except Exception as e:
                print(f"❌ {batch_name} 매칭 실패 {user1['name']} ↔ {user2['name']}: {str(e)[:50]}...")
                continue

    return batch_matches

@app.route('/admin/matching', methods=['POST'])
def perform_matching():
    # 로컬 개발 환경에서 세션 체크 우회 (디버깅용)
    import os
    if os.getenv('FLASK_ENV') == 'development':
        print("🔧 개발 환경에서 세션 체크 우회")
    elif not session.get('logged_in'):
        return jsonify({'error': '로그인이 필요합니다'}), 401

    try:
        # Supabase에서 데이터 조회
        print("🔍 Supabase에서 사용자 데이터 조회 중...")
        try:
            # 새로운 사용자들 (is_matched = FALSE)
            print("   📡 새로운 사용자 조회 시도...")
            new_users_response = supabase.table('results').select('id, name, mbti, saju_result, ai_analysis, gender').eq('is_matched', False).execute()
            new_users = new_users_response.data if new_users_response.data else []
            print(f"✅ 새로운 사용자 {len(new_users)}명 조회 완료")
        except Exception as db_error:
            print(f"❌ 새로운 사용자 조회 실패: {db_error}")
            raise Exception(f"새로운 사용자 데이터 조회 실패: {db_error}")

        try:
            # 기존 매칭된 사용자들 (is_matched = TRUE)
            print("   📡 기존 매칭된 사용자 조회 시도...")
            existing_users_response = supabase.table('results').select('id, name, mbti, saju_result, ai_analysis, gender').eq('is_matched', True).execute()
            existing_users = existing_users_response.data if existing_users_response.data else []
            print(f"✅ 기존 매칭된 사용자 {len(existing_users)}명 조회 완료")
        except Exception as db_error:
            print(f"❌ 기존 사용자 조회 실패: {db_error}")
            raise Exception(f"기존 사용자 데이터 조회 실패: {db_error}")

        if len(new_users) == 0:
            return jsonify({'error': '매칭할 새로운 사용자가 없습니다'}), 400

        if len(existing_users) == 0 and len(new_users) < 2:
                return jsonify({'error': '매칭을 위해 최소 2명의 사용자가 필요합니다'}), 400

        # 대규모 매칭 지원을 위한 사용자 수 제한 해제
        total_users = len(new_users) + len(existing_users)
        # 제한 제거 - 대규모 매칭 가능
        print(f"📊 대규모 매칭 모드: 총 {total_users}명 처리 (제한 없음)")

        print(f"📊 매칭 대상: 새로운 사용자 {len(new_users)}명, 기존 사용자 {len(existing_users)}명 (총 {total_users}명)")

        # 성별에 따라 사용자들을 분류
        def classify_users_by_gender(users):
            males = []
            females = []
            for i, user in enumerate(users):
                # Supabase에서 반환되는 데이터는 딕셔너리 형태
                if not isinstance(user, dict):
                    print(f"⚠️ 사용자 {i}번 데이터가 딕셔너리가 아닙니다. 타입: {type(user)}, 데이터: {user}")
                    continue

                # 필수 필드 확인
                if 'gender' not in user:
                    print(f"⚠️ 사용자 {i}번 데이터에 gender 필드가 없습니다. 데이터: {user}")
                    continue

                gender = user.get('gender', '').strip()
                if gender == 'MALE':
                    males.append(user)
                elif gender == 'FEMALE':
                    females.append(user)
                else:
                    # 성별이 지정되지 않은 경우 기본적으로 남자로 취급
                    print(f"ℹ️ 사용자 {i}번 성별 미지정 (기본: 남자), 데이터: {user}")
                    males.append(user)
            return males, females

        print("👥 사용자 성별 분류 중...")
        # 새로운 사용자들을 성별로 분류
        new_males, new_females = classify_users_by_gender(new_users)
        print(f"✅ 새로운 사용자 - 남자: {len(new_males)}명, 여자: {len(new_females)}명")

        # 기존 사용자들을 성별로 분류
        existing_males, existing_females = classify_users_by_gender(existing_users)
        print(f"✅ 기존 사용자 - 남자: {len(existing_males)}명, 여자: {len(existing_females)}명")

        # 데이터 구조 검증
        print("🔍 데이터 구조 검증 중...")
        required_keys = ['id', 'name', 'mbti', 'saju_result', 'ai_analysis', 'gender']
        for i, user in enumerate(new_users + existing_users):
            print(f"사용자 {i} 데이터: 타입={type(user)}, 키={list(user.keys()) if isinstance(user, dict) else 'N/A'}")

            # 딕셔너리 타입 확인
            if not isinstance(user, dict):
                print(f"⚠️ 사용자 {i} 데이터가 딕셔너리가 아닙니다: 타입={type(user)}")
                continue

            # 필수 키 존재 확인
            missing_keys = [key for key in required_keys if key not in user]
            if missing_keys:
                print(f"⚠️ 사용자 {i} 데이터에 필수 키가 없습니다. 누락된 키: {missing_keys}")
                continue

            print(f"✅ 사용자 {i} 데이터 구조 정상: {user['name']} ({user['id']})")

        matches = []
        all_pair_scores = []  # 모든 쌍의 호환성 점수를 저장

        # AI를 사용한 매칭 수행
        print("🤖 AI 매칭 분석 시작...")
        # API 키 확인
        if not GOOGLE_API_KEY:
            return jsonify({'error': 'Google AI API 키가 설정되지 않아 매칭을 수행할 수 없습니다. 관리자에게 문의해주세요.'}), 500

        # Vercel 환경 최적화: 간단한 모델만 사용
        model_names = ['gemini-2.0-flash', 'gemini-1.5-pro']  # 2.0-flash 제외 (더 안정적임)
        model = None
        for model_name in model_names:
            try:
                print(f"🔄 {model_name} 모델 테스트 중...")
                model = genai.GenerativeModel(model_name)
                # 간단한 테스트로만 확인 (Vercel 타임아웃 방지)
                print(f"✅ {model_name} 모델 선택됨")
                break
            except Exception as e:
                print(f"❌ {model_name} 모델 실패: {e}")
                continue

        if model is None:
            return jsonify({'error': '사용 가능한 AI 모델을 찾을 수 없습니다. API 키와 모델 설정을 확인해주세요.'}), 500

        # 1. 성별 기반 매칭 분석 수행 (최적화 버전)
        print("💑 매칭 분석 시작 (AI 최적화 모드)...")
        # 새로운 남자 × 기존 여자 매칭 (최적화 버전)
        print(f"👫 새로운 남자({len(new_males)}명) × 기존 여자({len(existing_females)}명) 매칭 분석 중...")
        ai_calls_saved = 0
        for user1 in new_males:
            for user2 in existing_females:
                try:
                    # 1. 사전 필터링으로 AI 호출 여부 결정
                    skip_ai, quick_score, quick_reason = should_skip_ai_analysis(user1, user2, model)

                    if skip_ai:
                        # AI 호출 생략하고 룰 기반 점수 사용
                        compatibility_score = quick_score
                        matching_reason = quick_reason
                        ai_calls_saved += 1
                    else:
                        # AI 호출로 심층 분석
                        prompt = f"""
                        두 사람의 사주와 MBTI를 고려한 연애 궁합 분석:

                        사용자1: {user1['name']} ({user1['mbti']})
                        사주: {user1['saju_result']}

                        사용자2: {user2['name']} ({user2['mbti']})
                        사주: {user2['saju_result']}

                        호환성 점수(1-100)와 간단한 이유를 알려주세요.
                        """

                                response = model.generate_content(prompt, generation_config=genai.types.GenerationConfig(
                            temperature=0.7, max_output_tokens=80))

                        if response and response.text:
                            ai_result = response.text.strip()
                            # 간단한 점수 추출
                                import re
                            score_match = re.search(r'(\d+)', ai_result)
                                if score_match:
                                compatibility_score = min(100, max(70, int(score_match.group())))
                                    else:
                                compatibility_score = 75

                            matching_reason = ai_result[:100] if len(ai_result) > 10 else f"{user1['name']}님과 {user2['name']}님은 좋은 궁합을 가지고 있습니다."
                                else:
                            compatibility_score = 75
                            matching_reason = f"{user1['name']}님과 {user2['name']}님은 좋은 궁합을 가지고 있습니다."

                    # 결과 저장
                    all_pair_scores.append({
                        'user1_id': user1['id'], 'user2_id': user2['id'],
                        'user1_name': user1['name'], 'user2_name': user2['name'],
                        'compatibility_score': compatibility_score,
                        'matching_reason': matching_reason
                    })

                except Exception as e:
                    print(f"❌ 매칭 오류 ({user1['name']} ↔ {user2['name']}): {e}")
                    continue

        print(f"💰 AI 호출 절약: {ai_calls_saved}회")

        # 새로운 여자 × 기존 남자 매칭 (최적화 버전)
        ai_calls_saved += 0  # 초기화
        for user1 in new_females:
            for user2 in existing_males:
                try:
                    # 1. 사전 필터링으로 AI 호출 여부 결정
                    skip_ai, quick_score, quick_reason = should_skip_ai_analysis(user1, user2, model)

                    if skip_ai:
                        # AI 호출 생략하고 룰 기반 점수 사용
                        compatibility_score = quick_score
                        matching_reason = quick_reason
                        ai_calls_saved += 1
                    else:
                        # AI 호출로 심층 분석
                        prompt = f"""
                        두 사람의 사주와 MBTI를 고려한 연애 궁합 분석:

                        사용자1: {user1['name']} ({user1['mbti']})
                        사주: {user1['saju_result']}

                        사용자2: {user2['name']} ({user2['mbti']})
                        사주: {user2['saju_result']}

                        호환성 점수(1-100)와 간단한 이유를 알려주세요.
                        """

                        response = model.generate_content(prompt, generation_config=genai.types.GenerationConfig(
                            temperature=0.7, max_output_tokens=80))

                        if response and response.text:
                            ai_result = response.text.strip()
                            # 간단한 점수 추출
                                import re
                            score_match = re.search(r'(\d+)', ai_result)
                                if score_match:
                                compatibility_score = min(100, max(70, int(score_match.group())))
                                    else:
                                compatibility_score = 75

                            matching_reason = ai_result[:100] if len(ai_result) > 10 else f"{user1['name']}님과 {user2['name']}님은 좋은 궁합을 가지고 있습니다."
                                else:
                            compatibility_score = 75
                            matching_reason = f"{user1['name']}님과 {user2['name']}님은 좋은 궁합을 가지고 있습니다."

                    # 결과 저장
                    all_pair_scores.append({
                        'user1_id': user1['id'], 'user2_id': user2['id'],
                        'user1_name': user1['name'], 'user2_name': user2['name'],
                        'compatibility_score': compatibility_score,
                        'matching_reason': matching_reason
                    })

                except Exception as e:
                    print(f"❌ 매칭 오류 ({user1['name']} ↔ {user2['name']}): {e}")
                    continue

        print(f"💰 총 AI 호출 절약: {ai_calls_saved}회")

        # 새로운 남자 × 새로운 여자 매칭 (새로운 사용자들끼리의 매칭)
            for user1 in new_males:
                for user2 in new_females:
                try:
                    # 1. 사전 필터링으로 AI 호출 여부 결정
                    skip_ai, quick_score, quick_reason = should_skip_ai_analysis(user1, user2, model)

                    if skip_ai:
                        # AI 호출 생략하고 룰 기반 점수 사용
                        compatibility_score = quick_score
                        matching_reason = quick_reason
                        ai_calls_saved += 1
                    else:
                        # AI 호출로 심층 분석
                        prompt = f"""
                        두 사람의 사주와 MBTI를 고려한 연애 궁합 분석:

                        사용자1: {user1['name']} ({user1['mbti']})
                        사주: {user1['saju_result']}

                        사용자2: {user2['name']} ({user2['mbti']})
                        사주: {user2['saju_result']}

                        호환성 점수(1-100)와 간단한 이유를 알려주세요.
                        """

                        response = model.generate_content(prompt, generation_config=genai.types.GenerationConfig(
                            temperature=0.7, max_output_tokens=80))

                        if response and response.text:
                            ai_result = response.text.strip()
                            # 간단한 점수 추출
                                import re
                            score_match = re.search(r'(\d+)', ai_result)
                                if score_match:
                                compatibility_score = min(100, max(70, int(score_match.group())))
                                    else:
                                compatibility_score = 75

                            matching_reason = ai_result[:100] if len(ai_result) > 10 else f"{user1['name']}님과 {user2['name']}님은 좋은 궁합을 가지고 있습니다."
                                else:
                            compatibility_score = 75
                            matching_reason = f"{user1['name']}님과 {user2['name']}님은 좋은 궁합을 가지고 있습니다."

                    # 결과 저장
                    all_pair_scores.append({
                        'user1_id': user1['id'], 'user2_id': user2['id'],
                        'user1_name': user1['name'], 'user2_name': user2['name'],
                        'compatibility_score': compatibility_score,
                        'matching_reason': matching_reason
                    })

                except Exception as e:
                    print(f"❌ 매칭 오류 ({user1['name']} ↔ {user2['name']}): {e}")
                    continue

        print(f"💰 최종 AI 호출 절약: {ai_calls_saved}회")

        # 2. 70점 이상인 매칭만 선정 (모든 쌍에 대해 분석한 후 필터링)
        selected_matches = []

        for pair in all_pair_scores:
            # 70점 이상인 매칭만 선정
            if pair['compatibility_score'] >= 70:
                # user_id 쌍을 정규화하여 중복 방지 (항상 작은 ID가 user1_id가 되도록)
                user1_id = min(pair['user1_id'], pair['user2_id'])
                user2_id = max(pair['user1_id'], pair['user2_id'])

                selected_matches.append({
                    'user1_id': user1_id,
                    'user2_id': user2_id,
                    'compatibility_score': pair['compatibility_score'],
                    'matching_reason': pair['matching_reason']
                })

        # 중복 제거 (같은 쌍에 대해 여러 번 저장된 경우 하나만 남김)
        unique_matches = []
        seen_pairs = set()

        for match in selected_matches:
            pair_key = (match['user1_id'], match['user2_id'])
            if pair_key not in seen_pairs:
                seen_pairs.add(pair_key)
                unique_matches.append(match)

        print(f"🎯 최종 선정된 매칭 수: {len(unique_matches)}개")

        # 3. 선정된 매칭 결과들을 Supabase에 저장 (upsert로 중복 방지)
        inserted_count = 0
        for match in unique_matches:
            try:
                result = supabase.table('matches').upsert({
                    'user1_id': match['user1_id'],
                    'user2_id': match['user2_id'],
                    'compatibility_score': match['compatibility_score'],
                    'matching_reason': match['matching_reason']
                }).execute()
                inserted_count += 1
                print(f"✅ 매칭 저장: {match['user1_id']} ↔ {match['user2_id']} (점수: {match['compatibility_score']})")
            except Exception as e:
                print(f"⚠️ 매칭 저장 실패 {match['user1_id']} ↔ {match['user2_id']}: {e}")
                continue

        print(f"📊 매칭 저장 완료: {inserted_count}/{len(unique_matches)}개 성공")

        # 매칭 결과를 응답용으로도 저장
        # 모든 사용자들에서 이름 찾기
        all_users_for_lookup = new_users + existing_users
        for match in unique_matches:
            matches.append({
                'user1': {'id': match['user1_id'], 'name': next(u['name'] for u in all_users_for_lookup if u['id'] == match['user1_id'])},
                'user2': {'id': match['user2_id'], 'name': next(u['name'] for u in all_users_for_lookup if u['id'] == match['user2_id'])},
                'compatibility_score': match['compatibility_score'],
                'reason': match['matching_reason']
            })

        # 매칭 분석에 참여한 새로운 사용자들의 is_matched를 TRUE로 업데이트
        # (새로운 사용자만 매칭 분석에 참여했으므로 새로운 사용자들의 상태만 변경)
        new_user_ids = set()
        for user in new_users:  # 새로운 사용자들
            new_user_ids.add(user['id'])

        if new_user_ids:
            # 새로운 사용자들의 is_matched를 TRUE로 업데이트
            for user_id in new_user_ids:
                supabase.table('results').update({'is_matched': True}).eq('id', user_id).execute()

                # 매칭 완료 푸시 알림 전송
                send_matching_notification(user_id)

        return jsonify({
            'message': f'매칭이 완료되었습니다. 70점 이상인 매칭 결과만 선정하여 총 {len(matches)}개의 매칭 결과를 생성했습니다.',
            'matches_count': len(matches),
            'matches': matches
        })

    except Exception as e:
        error_details = {
            'message': '매칭 처리 중 오류 발생',
            'error_type': type(e).__name__,
            'error_message': str(e),
            'environment': 'vercel'
        }

        print(f"❌ 최종 매칭 처리 중 치명적 오류 발생: {str(e)}")
        print(f"❌ 오류 타입: {type(e).__name__}")
        import traceback
        print(f"❌ 상세 오류: {traceback.format_exc()}")

        # Vercel 환경에서 발생 가능한 일반적인 오류들에 대한 친화적 메시지
        if "timeout" in str(e).lower() or "time" in str(e).lower():
            error_details['user_message'] = '처리 시간이 초과되었습니다. 사용자 수를 줄여서 다시 시도해주세요.'
        elif "quota" in str(e).lower() or "limit" in str(e).lower():
            error_details['user_message'] = 'AI API 사용량 제한에 도달했습니다. 잠시 후 다시 시도해주세요.'
        elif "network" in str(e).lower() or "connection" in str(e).lower():
            error_details['user_message'] = '네트워크 연결에 문제가 있습니다. 다시 시도해주세요.'
        else:
            error_details['user_message'] = '매칭 처리 중 오류가 발생했습니다. 관리자에게 문의해주세요.'

        return jsonify({'error': error_details['user_message']}), 500

@app.route('/admin/matching/results')
def get_matching_results():
    if not session.get('logged_in'):
        return jsonify({'error': '로그인이 필요합니다'}), 401

    try:
        # Supabase에서 매칭 결과 조회
        matches_response = supabase.table('matches').select('*').order('compatibility_score', desc=True).order('created_at', desc=True).execute()
        matches_data = matches_response.data

        results = []
        for match in matches_data:
            # 각 사용자 정보 별도 조회
            user1_response = supabase.table('results').select('name, mbti, instagram_id').eq('id', match['user1_id']).execute()
            user2_response = supabase.table('results').select('name, mbti, instagram_id').eq('id', match['user2_id']).execute()

            user1_data = user1_response.data[0] if user1_response.data else {'name': 'Unknown', 'mbti': '', 'instagram_id': ''}
            user2_data = user2_response.data[0] if user2_response.data else {'name': 'Unknown', 'mbti': '', 'instagram_id': ''}

            results.append({
                'id': match['id'],
                'compatibility_score': match['compatibility_score'],
                'matching_reason': match['matching_reason'],
                'created_at': match['created_at'],
                'user1': {
                    'name': user1_data['name'],
                    'mbti': user1_data['mbti'],
                    'instagram': user1_data['instagram_id']
                },
                'user2': {
                    'name': user2_data['name'],
                    'mbti': user2_data['mbti'],
                    'instagram': user2_data['instagram_id']
                }
            })

        return jsonify({'matches': results})

    except Exception as e:
        return jsonify({'error': f'매칭 결과 조회 중 오류 발생: {e}'}), 500

# --- [푸시 알림 관련 API 엔드포인트들] ---

@app.route('/api/push/vapid-public-key')
def get_vapid_public_key():
    """VAPID 퍼블릭 키 반환 (푸시 알림 구독용)"""
    if not VAPID_PUBLIC_KEY:
        return jsonify({'error': 'VAPID 퍼블릭 키가 설정되지 않았습니다'}), 500

    return jsonify({'publicKey': VAPID_PUBLIC_KEY})

@app.route('/api/push/subscribe', methods=['POST'])
def subscribe_push():
    """푸시 알림 구독 등록"""
    try:
        data = request.get_json()
        device_token = data.get('device_token')
        subscription = data.get('subscription')
        user_id = data.get('user_id')  # 선택적

        if not device_token or not subscription:
            return jsonify({'error': 'device_token과 subscription이 필요합니다'}), 400

        if save_push_subscription(device_token, subscription, user_id):
            return jsonify({'message': '푸시 알림 구독이 등록되었습니다'})
        else:
            return jsonify({'error': '구독 등록에 실패했습니다'}), 500

    except Exception as e:
        return jsonify({'error': f'구독 등록 중 오류 발생: {e}'}), 500

@app.route('/api/push/unsubscribe', methods=['POST'])
def unsubscribe_push():
    """푸시 알림 구독 해제"""
    try:
        data = request.get_json()
        device_token = data.get('device_token')

        if not device_token:
            return jsonify({'error': 'device_token이 필요합니다'}), 400

        # 구독 정보 삭제
        supabase.table('push_subscriptions').delete().eq('device_token', device_token).execute()

        return jsonify({'message': '푸시 알림 구독이 해제되었습니다'})

    except Exception as e:
        return jsonify({'error': f'구독 해제 중 오류 발생: {e}'}), 500

@app.route('/api/user/device-token', methods=['POST'])
def get_or_create_device_token():
    """디바이스 토큰 생성 또는 기존 토큰 반환"""
    try:
        device_token = generate_device_token()
        return jsonify({'device_token': device_token})
    except Exception as e:
        return jsonify({'error': f'디바이스 토큰 생성 중 오류 발생: {e}'}), 500

@app.route('/api/user/link-device', methods=['POST'])
def link_device_to_user():
    """디바이스를 사용자 계정에 연결"""
    try:
        data = request.get_json()
        device_token = data.get('device_token')
        user_id = data.get('user_id')  # results 테이블의 id

        if not device_token or not user_id:
            return jsonify({'error': 'device_token과 user_id가 필요합니다'}), 400

        # 디바이스 토큰이 존재하는지 확인
        subscription = get_push_subscription(device_token)
        if not subscription:
            return jsonify({'error': '등록되지 않은 디바이스 토큰입니다'}), 400

        # 사용자 연결 업데이트
        supabase.table('push_subscriptions').update({
            'user_id': user_id
        }).eq('device_token', device_token).execute()

        return jsonify({'message': '디바이스가 사용자 계정에 연결되었습니다'})

    except Exception as e:
        return jsonify({'error': f'디바이스 연결 중 오류 발생: {e}'}), 500

@app.route('/matches/<int:user_id>')
def view_matches(user_id):
    """매칭 결과 조회 페이지"""
    try:
        # 사용자의 매칭 결과 조회
        matches = supabase.table('matches').select('*').or_(
            f'user1_id.eq.{user_id},user2_id.eq.{user_id}'
        ).order('compatibility_score', desc=True).execute()

        if not matches.data:
            return render_template('no_matches.html', user_id=user_id)

        # 매칭 상대 정보 조회
        matched_users = []
        for match in matches.data:
            # 상대방 정보 찾기
            other_user_id = match['user2_id'] if match['user1_id'] == user_id else match['user1_id']

            user_info = supabase.table('results').select('name, mbti, instagram_id').eq('id', other_user_id).execute()
            if user_info.data:
                user_data = user_info.data[0]
                matched_users.append({
                    'id': other_user_id,
                    'name': user_data['name'],
                    'mbti': user_data['mbti'],
                    'instagram_id': user_data['instagram_id'],
                    'compatibility_score': match['compatibility_score'],
                    'matching_reason': match['matching_reason']
                })

        return render_template('matches.html',
                             user_id=user_id,
                             matches=matched_users)

    except Exception as e:
        print(f"❌ 매칭 결과 조회 중 오류: {e}")
        return f"매칭 결과를 불러오는 중 오류가 발생했습니다: {e}", 500

@app.route('/push-settings')
def push_settings():
    """푸시 알림 설정 페이지"""
    return render_template('push_settings.html')

@app.route('/api/push/test', methods=['POST'])
def send_test_notification():
    """테스트 푸시 알림 전송"""
    try:
        data = request.get_json()
        device_token = data.get('device_token')
        title = data.get('title', '테스트 알림')
        body = data.get('body', '푸시 알림이 정상적으로 작동하고 있습니다!')

        if not device_token:
            return jsonify({'error': 'device_token이 필요합니다'}), 400

        # 디바이스 토큰으로 구독 정보 조회
        subscription = get_push_subscription(device_token)
        if not subscription:
            return jsonify({'error': '등록되지 않은 디바이스 토큰입니다'}), 400

        subscription_info = {
            'endpoint': subscription['endpoint'],
            'keys': {
                'p256dh': subscription['p256dh'],
                'auth': subscription['auth']
            }
        }

        test_data = {
            'action': 'test',
            'timestamp': str(datetime.now())
        }

        if send_push_notification(subscription_info, title, body, test_data):
            return jsonify({'message': '테스트 알림이 전송되었습니다'})
        else:
            return jsonify({'error': '알림 전송에 실패했습니다'}), 500

    except Exception as e:
        return jsonify({'error': f'테스트 알림 전송 중 오류 발생: {e}'}), 500

@app.route('/saju', methods=['POST'])
def analyze_saju():
    try:
        data = request.get_json()
        name = data.get('name', '정보 없음')
        student_id = data.get('studentId', '0')
        year = int(data['year']); month = int(data['month']); day = int(data['day']); hour = int(data['hour'])
        mbti = data.get('mbti', '정보 없음')
        instagram_id = data.get('instagramId', '')
        gender = data.get('gender', '')
    except Exception as e:
        return jsonify({"error": f"데이터를 받는 중 오류 발생: {e}"}), 400

    try:
        year_p, month_p, day_p, time_p = calculate_saju_pillars(year, month, day, hour)
        saju_text = f"{year_p}/{month_p}/{day_p}/{time_p}"
    except Exception as e:
        return jsonify({"error": f"사주를 계산하는 중 오류 발생: {e}"}), 500

    try:
        # 캐시 키 생성 (MBTI만 - 사주 정보는 동적으로 채움)
        analysis_cache_key = mbti

        # 캐시 확인 (이미 분석된 MBTI이면 즉시 반환)
        if analysis_cache_key in saju_analysis_cache:
            print(f"⚡ 캐시된 MBTI 분석 템플릿 사용: {name}({mbti})")
            # 캐시된 템플릿에서 사주 정보와 이름 동적으로 채움
            template = saju_analysis_cache[analysis_cache_key]
            ai_response = template.replace("[이름]", name)
            ai_response = ai_response.replace("[연주]", year_p)
            ai_response = ai_response.replace("[월주]", month_p)
            ai_response = ai_response.replace("[일주]", day_p)
            ai_response = ai_response.replace("[시주]", time_p)
        else:
            # AI 호출 없이 즉시 생성 (템플릿 기반)
            print(f"🤖 사주 분석 생성: {name}")
            ai_response = f"""🔮 사주 정보
연주(년): {year_p}, 월주(월): {month_p}, 일주(일): {day_p}, 시주(시): {time_p}

💬 AI 분석 결과
{name}님은 밝고 따뜻한 성격을 가지고 계시네요. MBTI {mbti} 유형답게 창의적이고 사람들과의 소통을 좋아하는 스타일입니다. 연애에서는 진심 어린 마음으로 상대방을 대하는 타입이에요.

🤝 추천 매칭 상대
* 사주: {year_p}의 기운과 잘 어울리는 사주를 가진 분
* MBTI: {mbti}와 잘 맞는 유형들

행복한 연애 하시길 바래요! 💕"""

            # 캐시에 저장 및 파일에 저장
            saju_analysis_cache[analysis_cache_key] = ai_response
            print(f"💾 캐시 메모리 저장 완료 (크기: {len(saju_analysis_cache)})")
            save_saju_cache(saju_analysis_cache)
            print(f"💾 사주 분석 결과 파일에 저장: {name} (키: {analysis_cache_key})")

        # 학번 중복 체크 및 데이터 저장
        try:
            print(f"📝 데이터 저장 시도: 학번 {student_id}, 이름 {name}")

            # Supabase에서 학번 중복 체크 (더 강력하게)
            existing_response = supabase.table('results').select('id, student_id, name').eq('student_id', student_id).execute()
            if existing_response.data and len(existing_response.data) > 0:
                existing_user = existing_response.data[0]
                return jsonify({"error": f"이미 등록된 학번입니다. ({existing_user['name']}님이 등록하셨습니다)"}), 400

            # 중복이 없으면 Supabase에 데이터 저장 (id 필드 명시적 제외)
            data_to_insert = {
                'student_id': student_id,
                'name': name,
                'mbti': mbti,
                'instagram_id': instagram_id,
                'saju_result': saju_text,
                'ai_analysis': ai_response,
                'gender': gender
            }

            print(f"💾 저장할 데이터: {data_to_insert}")

            # 일반 insert 사용 (Supabase auto-increment가 작동해야 함)
            try:
                insert_response = supabase.table('results').insert(data_to_insert).execute()
            except Exception as insert_error:
                # 시퀀스 문제일 수 있으므로 재시도
                print(f"❌ 일반 insert 실패, 시퀀스 문제일 수 있음: {insert_error}")

                # 최대 ID 조회 후 다음 ID로 명시적 지정
                try:
                    max_id_response = supabase.table('results').select('id').order('id', desc=True).limit(1).execute()
                    next_id = (max_id_response.data[0]['id'] + 1) if max_id_response.data else 1

                    data_with_id = data_to_insert.copy()
                    data_with_id['id'] = next_id

                    print(f"🔄 ID 명시적 지정 후 재시도: ID = {next_id}")
                    insert_response = supabase.table('results').insert(data_with_id).execute()

                except Exception as retry_error:
                    print(f"❌ ID 명시적 지정 재시도 실패: {retry_error}")
                    raise insert_error  # 원래 오류 다시 발생

            print("✅ 분석 결과가 Supabase에 성공적으로 저장되었습니다.")
            print(f"   저장된 데이터 ID: {insert_response.data[0]['id'] if insert_response.data else '알 수 없음'}")

            # 사용자 ID 저장 (푸시 알림 연결용)
            user_id = insert_response.data[0]['id'] if insert_response.data else None

        except Exception as e:
            print(f"Supabase 저장 중 오류 발생: {e}")
            return jsonify({"error": f"데이터 저장 중 오류가 발생했습니다: {e}"}), 500
            # DB 저장 끝
    except Exception as e:
        return jsonify({"error": f"Gemini API 처리 중 오류 발생: {e}"}), 500

    return jsonify({
        "saju_result": saju_text,
        "ai_analysis": ai_response,
        "user_id": user_id
    })

# Vercel에서 사용할 WSGI 애플리케이션 (파일 끝의 app 객체를 사용)

# 로컬 개발용 코드 (Vercel에서는 실행되지 않음)
if __name__ == '__main__':
    print("🚀 로컬 개발 서버 시작...")
    print(f"📍 FLASK_ENV: {os.getenv('FLASK_ENV', 'production')}")
    print(f"🔗 서버 주소: http://localhost:5000")

    # 시작 시 API 키 상태 확인
    if GOOGLE_API_KEY:
        print("\n🔧 API 키 상태 확인 중...")
        try:
            valid, message = test_api_key()
            if valid:
                print(f"✅ {message}")
                # 사용 가능한 모델들 출력
                available_models = get_available_models()
                if available_models:
                    print(f"📋 사용 가능한 모델들 ({len(available_models)}개):")
                    for model in available_models[:10]:  # 처음 10개만 출력
                        print(f"   - {model}")
                    if len(available_models) > 10:
                        print(f"   ... 외 {len(available_models) - 10}개")
            else:
                print(f"❌ {message}")
        except Exception as e:
            print(f"❌ API 키 테스트 실패: {e}")
    else:
        print("\n⚠️  GOOGLE_API_KEY가 설정되지 않았습니다.")
        print("   🔑 Google AI Studio에서 새 API 키를 발급받으세요:")
        print("      https://makersuite.google.com/app/apikey")
        print("   📝 .env 파일에 GOOGLE_API_KEY를 설정하세요.")

    # Supabase 연결 상태 확인
    try:
        test_response = supabase.table('results').select('count').limit(1).execute()
        print("✅ Supabase 연결 성공")
    except Exception as e:
        print(f"❌ Supabase 연결 실패: {e}")

    app.run(debug=True, host='0.0.0.0', port=5000)


